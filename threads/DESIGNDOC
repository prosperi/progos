			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jakob Gruber <jakob.gruber@gmail.com>
Nico Schaumberger <e1025736@student.tuwien.ac.at>
Mino Sharkhawy <mino.sharkhawy@student.tuwien.ac.at>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

TODO

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

Priority donation is tracked by 1) keeping track of all locks that a thread
holds, 2) holding a reference to the thread owning a lock, and 3) keeping
a list of all threads waiting for a lock.

 ----------    held locks     ----------                   ----------
|          |   --------->    |          |                 |          |
|  Thread  |   lock holder   |   Lock   |   ---------->   |Semaphore |
|          |   <---------    |          |                 |          |
|          |                  ----------                  |          |
|          |               waiting threads                |          |
|          |        <---------------------------          |          |
 ----------                                                ----------

1) is achieved using a new list in thread struct and the corresponding element
member in thread lock. 2) as well as 3) were already part of the existing lock
implementation.

At all times, a thread's priority is the maximum of its static priority (set
by thread_set_priority() and its donated priority. The donated priority is
determined recursively by querying all held locks for maximum priority held
by a thread on its waiting list, which again returns the maximum of the threads'
static and donated priorities.

These data structures are updated whenever lock_acquire(), lock_try_acquire(),
and lock_release() are called.

TODO: infinite recursion handling.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

The priority of all threads on the waiting list are determined as described
above (B2). The first thread with maximum priority is chosen and unblocked.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

Lock acquire causes sema_down() to be called on the internal semaphore. No
changes have been made to sema_down() in this project - if the process can
enter, the semaphore value is decremented. Otherwise, it i put on the waiters
list and blocked. The scheduler then chooses the first thread with the highest
priority to run next.

Once it has entered successfully, the lock holder is saved, and the lock is
entered into the thread's list of held locks.

Combined with the process described in B2, this is sufficient to handle
priority donation. There is no special handling for nested donations. Recursive
priority calculation in thread_get_priority_recursive() handles this case
with ease.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

The lock holder is set to NULL and the lock is removed from the held locks 
list. sema_up() is then called, which goes through all threads on the waiting
list and unblocks the first one with maximum priority. Since the unblocked
thread has a higher priority than the currently running thread, thread_yield()
is called and the unblocked thread is scheduled.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

TODO

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Using recursive priority calculation is simple. There is very little
book-keeping involved - only held locks and waiting threads must be saved. The
waiting list was already provided by the semaphore implementation. Special
cases like nested donation handle themselves.

This design has issues when a wait cycle is concerned, since it will enter
an infinite recursion when trying to calculate thread priority.

TODO: how we solved this.

Another design we considered was calculating actual thread priority whenever
something caused it to change (lock_acquire(), lock_release(), thread creation,
etc). An advantage to this design was that much less superfluous calculation was
required. However, it seemed to be much harder to keep track of changes correctly.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
